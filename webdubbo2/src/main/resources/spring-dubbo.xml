<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd
        ">
    <!--
      register="true"  是否注册服务
    -->
    <!--
     subscribe="true"  是否订阅服务
   -->
    <!-- dynamic="true"  如果为false 服务提供者初次注册时为禁用状态，需人工启用。断线时，将不会被自动删除，需人工禁用 -->
    <!--address="zookeeper://127.0.0.1:2181 | zookeeper://127.0.0.1:2181" 竖线标识多注册中心  也可以单独配置-->
    <dubbo:registry protocol="zookeeper" address="zookeeper://127.0.0.1:2181 | zookeeper://127.0.0.1:2181" register="true" subscribe="true"
                    dynamic="true"/>
    <!-- 多注册中心配置-->
    <dubbo:registry id="registry2" address="zookeeper://127.0.0.1:2181" protocol="zookeeper"></dubbo:registry>
    <!-- 给dubbo服务者起个名 -->
    <!--logger="log4j"  dubbo 开始内置 log4j、slf4j、jcl、jdk 这些日志框架的适配[1]-->
    <dubbo:application name="xue-dubbo" logger="log4j"/>
    <!-- 用zookeeper注册服务中心暴露服务地址 -->
    <!-- 暴露dubbo的通信端口 -->
    <!--
        dispatcher="all"
            all 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等。
            direct 所有消息都不派发到线程池，全部在 IO 线程上直接执行。
            message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在 IO 线程上执行。
            execution 只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在 IO 线程上执行。
            connection 在 IO 线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池。
    -->
    <!--
        threadpool="fixed"
        fixed 固定大小线程池，启动时建立线程，不关闭，一直持有。(缺省)
        cached 缓存线程池，空闲一分钟自动删除，需要时重建。
        limited 可伸缩线程池，但池中的线程数只会增长不会收缩。只增长不收缩的目的是为了避免收缩时突然来了大流量引起的性能问题。
        eager 优先创建Worker线程池。在任务数量大于corePoolSize但是小于maximumPoolSize时，优先创建Worker来处理任务。当任务数量大于maximumPoolSize时，将任务放入阻塞队列中。阻塞队列充满时抛出RejectedExecutionException。(相比于cached:cached在任务数量超过maximumPoolSize时直接抛出异常而不是将任务放入阻塞队列)
    -->
    <!--name="dubbo" 协议设置 -->
    <!--accesslog="true" 将访问日志输出到当前应用的log4j日志-->
    <dubbo:protocol name="dubbo" port="20885" dispatcher="all" threadpool="fixed" threads="100" accesslog="true"/>
    <!--多协议设置 -->
    <!--<dubbo:protocol name="rmi" port="1099" />-->
    <!-- token="xuetocken" 开启令牌验证 固定token令牌，相当于密码 -->
    <dubbo:provider export="true" token="xuetocken"/>
    <!--关闭所有服务的启动时检查 (没有提供者时报错)-->
    <dubbo:consumer check="false"/>


    <import resource="classpath:spring-dubbo-customers.xml"/>
    <import resource="classpath:spring-dubbo-providers.xml"/>
    <!--<import resource="classpath:spring-dubbo-other.xml"/>-->

</beans>
