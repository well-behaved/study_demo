server:
  port: 8080

mybatis:
  mapper-locations: classpath*:mapper/*Mapper.xml
sharding:
  jdbc:
    datasource:
      # 所有的数据源
      names: ds0,ds1,ds-salve0,ds-salve1
      # 主数据源ds0
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/xue_test?useUnicode=true&characterEncoding=utf8
        username: root
        password: souche2015
      # 主数据源ds1
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/xue_test2?useUnicode=true&characterEncoding=utf8
        username: root
        password: souche2015
      # 从数据源ds1
      ds-salve0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/xue_test_slave?useUnicode=true&characterEncoding=utf8
        username: root
        password: souche2015
      # 从数据源ds1
      ds-salve1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/xue_test_slave?useUnicode=true&characterEncoding=utf8
        username: root
        password: souche2015
    # 自定义分片算法
    config:
      sharding:
        #读写分离设置
        master-slave-rules:
          # 数据源1
          ds-master-0:
            master-data-source-name: ds0
            slave-data-source-names: ds-salve0
          # 数据源2
          ds-master-1:
            master-data-source-name: ds1
            slave-data-source-names: ds-salve1
        # 配置日志sql
        props:
          sql.show: true
        #分表分库设置
        tables:
          t_user:  #t_user表
            key-generator-column-name: id  #主键
            actual-data-nodes: ds-master-${0..1}.t_user${0..1}    #数据节点,均匀分布
            database-strategy:  #分库策略
              # complex 复合分片策略。提供对SQL语句中的=, IN和BETWEEN AND的分片操作支持。
              # hint 通过Hint而非SQL解析的方式分片的策略。
              # inline Inline表达式分片策略。使用Groovy的Inline表达式，提供对SQL语句中的=和IN的分片操作支持。
              # standard 标准分片策略。提供对SQL语句中的=, IN和BETWEEN AND的分片操作支持。
              complex:
                #分库键 根据那几列来分库
                shardingColumns: id,name
                # 分库算法实现类
                algorithmClassName: com.xue.demo.shardingjdbc.myself.DbShardingAlgorithm
            table-strategy:     #分表策略
              complex:
                #分表键 根据那几列来分表
                shardingColumns: id,name
                # 分表算法实现类
                algorithmClassName: com.xue.demo.shardingjdbc.myself.TableShardingAlgorithm
#    # 简单 分片算法 使用内置功能进行分表分库算法的实现 可以用行级表达式实现简单的递增hash等运算
#    config:
#      sharding:
#        #读写分离设置
#        master-slave-rules:
#          # 分库1
#          ds-master-0:
#            master-data-source-name: ds0
#            slave-data-source-names: ds-salve0
#          # 分库2
#          ds-master-1:
#            master-data-source-name: ds1
#            slave-data-source-names: ds-salve1
#        # 配置日志sql
#        props:
#          sql.show: true
#        #分表分库设置
#        tables:
#          t_user:  #t_user表
#            key-generator-column-name: id  #主键
#            actual-data-nodes: ds-master-${0..1}.t_user${0..1}    #数据节点,均匀分布
#            database-strategy:  #分库策略
#              inline: #行表达式
#                sharding-column: id        #列名称，多个列以逗号分隔
#                algorithm-expression: ds-master-${id % 2}    #按模运算分配
#            table-strategy:     #分表策略 分表策略，这里不能跟分库策略一样，否则会导致有一半数据表没有机会插入数据
#              inline: #行表达式
#                sharding-column: id
#                algorithm-expression: t_user${(id % 5)%2}  #按模运算分配